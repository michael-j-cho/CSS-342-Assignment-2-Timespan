Fri Jan 15 20:54:12 PST 2021
Linux csslab6.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1015102(mikec87) gid=2121015102(mikec87) groups=2121015102(mikec87),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
test1 complete
test2 complete
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./timespan.cpp
11,14c11,13
<   out << ts.getHour() << ":" << setw(2) << setfill('0') 
<   << ts.getMinute() << ":" << setw(2) << setfill('0') 
<   << ts.getSecond();
<   return out; 
---
>   out << ts.getHour() << ":" << setw(2) << setfill('0') << ts.getMinute() << ":"
>       << setw(2) << setfill('0') << ts.getSecond();
>   return out;
31c30,31
< int TimeSpan::convertToSeconds(double hour, double minute, double second) const {
---
> int TimeSpan::convertToSeconds(double hour, double minute,
>                                double second) const {
47,49c47
< int TimeSpan::getHour() const { 
<   return this->hour; 
<   }
---
> int TimeSpan::getHour() const { return this->hour; }
52,54c50
< int TimeSpan::getMinute() const { 
<   return this->minute; 
< }
---
> int TimeSpan::getMinute() const { return this->minute; }
57,59c53
< int TimeSpan::getSecond() const { 
<   return this->second; 
< }
---
> int TimeSpan::getSecond() const { return this->second; }
66,67c60,62
<   int seconds = convertToSeconds(ts.hour, ts.minute, ts.second) + convertToSeconds(this->hour, this->minute, this->second);
<   TimeSpan tsSum(0,0,0);
---
>   int seconds = convertToSeconds(ts.hour, ts.minute, ts.second) +
>                 convertToSeconds(this->hour, this->minute, this->second);
>   TimeSpan tsSum(0, 0, 0);
75,76c70,72
<   int seconds = convertToSeconds(this->hour, this->minute, this->second) - convertToSeconds(ts.hour, ts.minute, ts.second);
<   TimeSpan tsSub(0,0,0);
---
>   int seconds = convertToSeconds(this->hour, this->minute, this->second) -
>                 convertToSeconds(ts.hour, ts.minute, ts.second);
>   TimeSpan tsSub(0, 0, 0);
84,85c80,82
<   int seconds = number * convertToSeconds(this->hour, this->minute, this->second);
<   TimeSpan tsLarge(0,0,0);
---
>   int seconds =
>       number * convertToSeconds(this->hour, this->minute, this->second);
>   TimeSpan tsLarge(0, 0, 0);
93,94c90,92
<   if(ts.getHour() == getHour() && ts.getMinute() == getMinute() && ts.getSecond() == getSecond()) {
<   return true; 
---
>   if (ts.getHour() == getHour() && ts.getMinute() == getMinute() &&
>       ts.getSecond() == getSecond()) {
>     return true;
101,102c99,101
<   if(ts.getHour() != getHour() || ts.getMinute() != getMinute() || ts.getSecond() != getSecond()) {
<   return true; 
---
>   if (ts.getHour() != getHour() || ts.getMinute() != getMinute() ||
>       ts.getSecond() != getSecond()) {
>     return true;
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==1102== Memcheck, a memory error detector
==1102== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1102== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==1102== Command: ./a.out
==1102== Parent PID: 420
==1102== 
==1102== 
==1102== HEAP SUMMARY:
==1102==     in use at exit: 0 bytes in 0 blocks
==1102==   total heap usage: 1 allocs, 1 frees, 72,704 bytes allocated
==1102== 
==1102== All heap blocks were freed -- no leaks are possible
==1102== 
==1102== For lists of detected and suppressed errors, rerun with: -s
==1102== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/mikec87/C++/CSS342/ass2-timespan/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        22       0 100.00%
test2()                           1       0 100.00%        15       0 100.00%
test3()                           1       1   0.00%        10      10   0.00%
main                              1       0 100.00%         7       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             4       1  75.00%        54      10  81.48%

File '/home/NETID/mikec87/C++/CSS342/ass2-timespan/timespan.cpp':
Name                                                       Regions    Miss   Cover     Lines    Miss   Cover
------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, TimeSpan const&)                       1       0 100.00%         6       0 100.00%
TimeSpan::TimeSpan(double, double, double)                       1       0 100.00%        12       0 100.00%
TimeSpan::convertToSeconds(double, double, double) const         1       0 100.00%         4       0 100.00%
TimeSpan::formatTime()                                           1       0 100.00%         9       0 100.00%
TimeSpan::getHour() const                                        1       0 100.00%         3       0 100.00%
TimeSpan::getMinute() const                                      1       0 100.00%         3       0 100.00%
TimeSpan::getSecond() const                                      1       0 100.00%         3       0 100.00%
TimeSpan::isPositive() const                                     1       1   0.00%         1       1   0.00%
TimeSpan::operator+(TimeSpan const&) const                       1       0 100.00%         7       0 100.00%
TimeSpan::operator-(TimeSpan const&) const                       1       0 100.00%         7       0 100.00%
TimeSpan::operator*(unsigned int) const                          1       0 100.00%         7       0 100.00%
TimeSpan::operator==(TimeSpan const&) const                      8       1  87.50%         6       2  66.67%
TimeSpan::operator!=(TimeSpan const&) const                      8       0 100.00%         6       0 100.00%
------------------------------------------------------------------------------------------------------------
TOTAL                                                           27       2  92.59%        74       3  95.95%
/home/NETID/mikec87/C++/CSS342/ass2-timespan/main.cpp:
    1|       |#include <cassert>
    2|       |#include <iostream>
    3|       |#include <sstream>
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// testing constructor
   10|      1|void test1() {
   11|      1|  TimeSpan ts(1, 20, 30);
   12|      1|  stringstream ss;
   13|      1|  ss << ts;
   14|      1|  assert(ss.str() == "1:20:30");
   15|      1|
   16|      1|  TimeSpan ts2(4, -20, -90);
   17|      1|  ss.str("");
   18|      1|  ss << ts2;
   19|      1|  assert(ss.str() == "3:38:30");
   20|      1|
   21|      1|  TimeSpan ts3(1.5, 30.5, -90);
   22|      1|  ss.str("");
   23|      1|  ss << ts3;
   24|      1|  assert(ss.str() == "1:59:00");
   25|      1|
   26|      1|  TimeSpan ts4(0, 0.07, 0);
   27|      1|  ss.str("");
   28|      1|  ss << ts4;
   29|      1|  assert(ss.str() == "0:00:04");
   30|      1|  cout << "test1 complete" << endl;
   31|      1|}
   32|       |
   33|       |// testing equality, addition, subtraction, multiplication
   34|      1|void test2() {
   35|      1|  TimeSpan ts(1, 20, 30);
   36|      1|  TimeSpan ts2(1, 20, 30);
   37|      1|  TimeSpan ts3(0, 0, 0);
   38|      1|  assert(ts == ts2);
   39|      1|  assert(!(ts != ts2));
   40|      1|  assert(ts != ts3);
   41|      1|  assert((ts + ts + ts) == (ts2 * 3));
   42|      1|  assert((ts * 5) == (ts2 * 4) + ts2);
   43|      1|  assert((ts * 5) == (ts2 * 6) - ts2);
   44|      1|  assert((ts + ts - ts) == ((ts2 * 2) - ts));
   45|      1|  assert((ts - ts2) == ts3);
   46|      1|  assert((ts3 * 5) == ts3);
   47|      1|  cout << "test2 complete" << endl;
   48|      1|}
   49|       |
   50|      0|void test3() {
   51|      0|  TimeSpan ts0(0, 0, 0);
   52|      0|  TimeSpan ts1(0, 0, 10);
   53|      0|  TimeSpan ts2 = ts0 - ts1;
   54|      0|  assert(ts1.isPositive() && !ts2.isPositive());
   55|      0|  stringstream ss;
   56|      0|  ss << ts2;
   57|      0|  assert(ss.str() == "-0:00:10");
   58|      0|  cout << "test3 complete" << endl;
   59|      0|}
   60|       |
   61|      1|int main() {
   62|      1|  test1();
   63|      1|  test2();
   64|      1|  // test3();
   65|      1|  cout << "Done." << std::endl;
   66|      1|  return 0;
   67|      1|}

/home/NETID/mikec87/C++/CSS342/ass2-timespan/timespan.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/2/18.
    3|       |//
    4|       |
    5|       |#include "timespan.h"
    6|       |#include <iomanip>
    7|       |
    8|       |#define errCheck1 1
    9|       |
   10|      4|ostream &operator<<(ostream &out, const TimeSpan &ts) {
   11|      4|  out << ts.getHour() << ":" << setw(2) << setfill('0') 
   12|      4|  << ts.getMinute() << ":" << setw(2) << setfill('0') 
   13|      4|  << ts.getSecond();
   14|      4|  return out; 
   15|      4|}
   16|       |
   17|       |// explicit TimeSpan(int Hour = 0, int Minute = 0, int Second = 0);
   18|     22|TimeSpan::TimeSpan(double hour, double minute, double second) {
   19|     22|  this->hour = 0;
   20|     22|  this->minute = 0;
   21|     22|  this->second = 0;
   22|     22|
   23|     22|  double tempSec = convertToSeconds(hour, minute, second);
   24|     22|  double mins = tempSec / 60;
   25|     22|  this->second = (int)tempSec % 60;
   26|     22|  this->minute += (int)mins;
   27|     22|  this->hour = this->minute / 60;
   28|     22|  this->minute %= 60;
   29|     22|}
   30|       |
   31|     60|int TimeSpan::convertToSeconds(double hour, double minute, double second) const {
   32|     60|  double allSeconds = ((hour * 60) + minute) * 60 + second;
   33|     60|  return (int)allSeconds;
   34|     60|}
   35|       |
   36|     15|TimeSpan TimeSpan::formatTime() {
   37|     15|  double tempSec = convertToSeconds(this->hour, this->minute, this->second);
   38|     15|  double mins = tempSec / 60;
   39|     15|  this->second = (int)tempSec % 60;
   40|     15|  this->minute += (int)mins;
   41|     15|  this->hour = this->minute / 60;
   42|     15|  this->minute %= 60;
   43|     15|  return *this;
   44|     15|}
   45|       |
   46|       |// hour component
   47|     22|int TimeSpan::getHour() const { 
   48|     22|  return this->hour; 
   49|     22|  }
   50|       |
   51|       |// minute component
   52|     20|int TimeSpan::getMinute() const { 
   53|     20|  return this->minute; 
   54|     20|}
   55|       |
   56|       |// second component
   57|     20|int TimeSpan::getSecond() const { 
   58|     20|  return this->second; 
   59|     20|}
   60|       |
   61|       |// true if timespan is 0 or larger
   62|      0|bool TimeSpan::isPositive() const { return true; }
   63|       |
   64|       |// add
   65|      4|TimeSpan TimeSpan::operator+(const TimeSpan &ts) const {
   66|      4|  int seconds = convertToSeconds(ts.hour, ts.minute, ts.second) + convertToSeconds(this->hour, this->minute, this->second);
   67|      4|  TimeSpan tsSum(0,0,0);
   68|      4|  tsSum.second = seconds;
   69|      4|  tsSum.formatTime();
   70|      4|  return tsSum;
   71|      4|}
   72|       |
   73|       |// subtract
   74|      4|TimeSpan TimeSpan::operator-(const TimeSpan &ts) const {
   75|      4|  int seconds = convertToSeconds(this->hour, this->minute, this->second) - convertToSeconds(ts.hour, ts.minute, ts.second);
   76|      4|  TimeSpan tsSub(0,0,0);
   77|      4|  tsSub.second = seconds;
   78|      4|  tsSub.formatTime();
   79|      4|  return tsSub;
   80|      4|}
   81|       |
   82|       |// multiply with an integer
   83|      7|TimeSpan TimeSpan::operator*(unsigned int number) const {
   84|      7|  int seconds = number * convertToSeconds(this->hour, this->minute, this->second);
   85|      7|  TimeSpan tsLarge(0,0,0);
   86|      7|  tsLarge.second = seconds;
   87|      7|  tsLarge.formatTime();
   88|      7|  return tsLarge;
   89|      7|}
   90|       |
   91|       |// equality ==
   92|      7|bool TimeSpan::operator==(const TimeSpan &ts) const {
   93|      7|  if(ts.getHour() == getHour() && ts.getMinute() == getMinute() && ts.getSecond() == getSecond()) {
   94|      7|  return true; 
   95|      7|  }
   96|      0|  return false;
   97|      0|}
   98|       |
   99|       |// inequality !=
  100|      2|bool TimeSpan::operator!=(const TimeSpan &ts) const {
  101|      2|  if(ts.getHour() != getHour() || ts.getMinute() != getMinute() || ts.getSecond() != getSecond()) {
  102|      1|  return true; 
  103|      1|  }
  104|      1|  return false;
  105|      1|}

Fri Jan 15 20:54:17 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
